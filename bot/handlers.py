from aiogram import F, Router, types
from aiogram.filters import Command
from aiogram.types import Message
from aiogram.types import FSInputFile
import requests
import os

from bot import kb
from bot import text
from bot.config import BOT_TOKEN
from models.zero_shot.zero_shot import run_zero_shot

router = Router()

@router.message(Command("start"))
async def start_handler(msg: Message):
    '''
    Message '/start' -> main menu 
    '''
    await msg.answer(text.greet.format(name=msg.from_user.full_name), reply_markup=kb.main_menu)

@router.message(F.text == "–ú–µ–Ω—é")
@router.message(F.text == "–í—ã–π—Ç–∏ –≤ –º–µ–Ω—é")
@router.message(F.text == "‚óÄÔ∏è –í—ã–π—Ç–∏ –≤ –º–µ–Ω—é")
async def main_menu(msg: Message):
    await msg.answer(text.main_menu, reply_markup=kb.main_menu)



@router.callback_query(F.data == 'upload_audio')
async def audio_menu(callback: types.CallbackQuery):
    '''
    After pushing 'üé∂ –ó–∞–≥—Ä—É–∑–∏—Ç—å –∞—É–¥–∏–æ–¥–æ—Ä–æ–∂–∫—É' button raises audio menu
    '''
    await callback.message.answer(text.audio_menu, reply_markup=kb.audio_menu)
    await callback.answer()

@router.callback_query(F.data == "help")
async def help_button(callback: types.CallbackQuery):
    await callback.message.answer("–î–∞–Ω–Ω—ã–π –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç —Ä–∞–∑–ª–æ–∂–∏—Ç—å –ø–µ—Å–Ω—é –Ω–∞ —Å–æ—Å—Ç–∞–≤–ª—è—é—â–∏–µ –∏–ª–∏ –≤—ã–¥–µ–ª–∏—Ç—å –Ω—É–∂–Ω—ã–π —Ç–µ–±–µ –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç")
    await callback.answer()

@router.callback_query(F.data == 'support')
async def support_button(callback: types.CallbackQuery):
    await callback.message.answer(" –ß—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∞—Ç—å –¥–∞–Ω–Ω—ã–π –ø—Ä–æ–µ–∫—Ç —Å–≤—è–∂–∏—Å—å —Å –æ–¥–Ω–∏–º –∏–∑ –µ–≥–æ —Å–æ–∑–¥–∞—Ç–µ–ª–µ–π:\
                                   \n @sasha_doroshkevich \n @roman_dvoryankov \n @polozhiev \
                                   \n @noonmare \n @ivansbrodov") 
    await callback.answer()

@router.callback_query(F.data ==  "return_1")
async def audio_to_main(callback: types.CallbackQuery):
    await callback.message.answer(text.main_menu, reply_markup=kb.main_menu)
    await callback.answer()

@router.callback_query(F.data ==  "selection")
async def audio_to_select(callback: types.CallbackQuery):
    await callback.message.answer(text=text.select_menu)
    await callback.message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–µ—Ä–≤—ã–π —Ñ–∞–π–ª')
    global first_file
    first_file = True
    await callback.answer()


# @router.callback_query(F.data ==  "return_2")
# async def select_to_audio(callback: types.CallbackQuery):
#     await callback.message.answer(text.audio_menu, reply_markup=kb.audio_menu)
#     await callback.answer()


@router.callback_query(F.data == "decomposition")
async def audio_decomp(callback: types.CallbackQuery):
    await callback.message.answer("–ú–æ–∂–µ—à—å –ø—Ä–∏—Å–ª–∞—Ç—å –≤ —á–∞—Ç –ø–µ—Å–Ω—é, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–µ–ª –±—ã —Ä–∞–∑–ª–æ–∂–∏—Ç—å")
    await callback.answer()

URI_INFO = f'https://api.telegram.org/bot{BOT_TOKEN}/getFile?file_id='
URI = f'https://api.telegram.org/file/bot{BOT_TOKEN}/'

@router.message(F.audio)
async def doc_handler(message: types.Message):
    global first_file
    if not os.path.exists('input_files'):
        os.mkdir('input_files')

    file_id=message.audio.file_id
    response = requests.get(URI_INFO + file_id)
    file_path = response.json()['result']['file_path']
    audio = requests.get(URI + file_path)

    if first_file:
        with open('input_files/mix.mp3', 'wb') as f:
            f.write(audio.content)
        first_file = False
        await message.answer('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –≤—Ç–æ—Ä–æ–π —Ñ–∞–π–ª')

    else:
        with open('input_files/query.mp3', 'wb') as f:
            f.write(audio.content)
        first_file = True
        await message.answer('–ò–¥–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ú–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ–ª—å–Ω–æ–µ –≤—Ä–µ–º—è')

        out_path = run_zero_shot('input_files/mix.mp3', 'input_files/query.mp3')
        audio = FSInputFile(out_path)
        await message.answer_audio(audio=audio) 
        os.remove('input_files/mix.mp3')
        os.remove('input_files/query.mp3')

